22.09.22

1. 원시타입/ 참조타입
자바스크립트의 변수 타입은 원시타입과 참조타입으로 나눌 수 있다.
원시타입은 데이터를 복사할 때 메모리 공간을 확보하여 복사한 값만 저장한다.
불변성을 가지고 있기 때문에 기존 메모리에서 생성한 값 자체에 접근하지 않는다.
ex) let a=10;
     let b=a;
    console.log(b);
     a=30;
    console.log(b);

 b에 a를 복사했지만 a와 같은 메모리 공간을 쓰는 건 아니다. 값만 복사했으며 a와 b는 독립적이다.
원시타입의 복사처럼 실제 값을 복사하는 것을 깊은 복사라고 한다.
 
참조타입은 원시타입을 제외한 다른 타입들을 가리키며, 객체라고도 한다. 복사할 메모리의 주소를 간접적으로 참조하여 접근한다. 
원시타입은 값 자체가 메모리에 저장되어 있다면 참조타입은 Heap메모리 주소값이 저장되어 있다.
예컨대, 배열의 복사를 하면 배열의 값들이 아닌 같은 주소를 서로 참조하는 형태이다.
ex)let Arr = ['a', 'b', 'c'];
let Arr22 = Arr;

Arr[0]="NoNO";

console.log(Arr22);

객체에서 복사처럼 참조값(=주소값)을 복사하는 것을 얕은 복사라고 한다.

2. 순수함수/고차함수
순수함수는 불변성이 있는 함수며 입력과 결과가 서로에게 영향을 미치지 않는다. 데이터 변경이 일어나지 않는다.
ex) let v=10;
let z=20;
let ham=function(v,z){
    return v+z;
}
console.log(ham(v,z));
console.log(v);
console.log(z);

고차함수는 함수를 인자로 받거나, 함수를 반환하는 함수이다. map, filter, reduce, 등이 대표적이다.

ex)
let str=['aa','bb','cc'];
console.log(str.map((wh)=>wh+='zzzz')); //함수를 매개변수로 삼았으므로 고차함수이다.

3. 스프레드 연산자와 객체 복사
스프레드 연산자는 ES6에서 추가된 새로운 문법니다. 스프레드 연산자 외에 스프레드 타입, 펼침 연산자 등으로도 불린다.
배열, 객체, 문자열 등에서 값들을 펼친다. 배열이나 객체 변수 앞에 ...을 붙여 사용한다.
 3-1. 배열 복사
복사할 배열의 값을 새 배열 안에 펼쳐넣는다. 하지만 배열 안에 있는 객체에 대해서는 얕은 복사가 된다. 
ex)
let arr=[1,2,3,4,5];
let arr2=[...arr];
console.log(arr2);
arr2.push(99); //원본에 영향 끼치는 지 확인
console.log(arr);
console.log(arr2);

3-2. 배열 병합
  concat을 사용하는 것보다 스프레드 연산자를 사용하는 편이 더 깔끔하다.
ex)
let str=['s','c','h'];
let str2=['o','o','l'];
let str3=[...str, ...str2];
console.log(str3);

 3-3. 객체 복사

 let student={name:'tom', age:15};
let student2={...student, pet:'dog'};
console.log(student);
console.log(student2);


4. iterator- for in/ for of
iterable로 평가받은 객체는 Array, String, Map, Set, NodeList가 있다.
이러한 객체에는 [Symbol.iterator]메소드가 존재하며 for of, spread연산자 등이 사용 가능하다.

forEach가 배열에만 가능하다면 for ..of반복문은 [Symbol.iterator]메소드가 존재하는 객체에서만 가능하다.

 4-1. for ..of
구문)
   for (variable of iterable) {
      statement
    }
itrable은 객체/ variable은 iterable의 속성값을 할당받는 변수이다.
ex)
let iterable=[1,2,3,4];

for(let value of iterable){
    console.log(value);
}

5. Element.className vs Element.classList 
두 속성은 클래스에 변화를 주고 싶을 때 사용한다. 하지만 안전성에서 큰 차이가 있다.
Element.className으로 이벤트를 걸면 해당 요소의 클래스 자체를 지우고 새 클래스로 덮어쓴다.
Element.classList로 이벤트를 걸면 해당 요소의 클래스 뒤에 새로 클래스를 추가한다.(classList.add)

또 classList.replace를 사용하면 className처럼 기존 클래스를 지우고 새 클래스를 넣을 수도 있다.

6. append vs appendchild
1. appendChild()
오직 node객체만 자식 요소로 추가할 수 있다/특정 부모 노드의 자식 리스트 중 마지막 자식으로 붙인다/ 복수 추가 불가능

2. append()
appendChild와 다르게 text를 태그 안에 추가할 수 있다. 또한, 복수의 객체를 추가할 수 있다.

ex)
<body>
    <div></div>
</body>
<script>
 let divv=document.querySelector('div');
 divv.append('어서오세요');
 var p = document.createElement("p");
 document.body.appendChild(p);
 p.append('안녕히 가세요')
</script>

7. Object.freeze

8. form은 기본적으로 submit을 탑재(새로고침)