프로토타입->클래스/ 클로저->클래스의 private로 대체?
1. 프로토타입
자바 스크립트는 프로토타입 기반의 객체지향 언어이다. ES6부터 자바 스크립트에서 클래스를 사용할 수 있게 되었지만 
그 전까지 프로토타입으로 상속을 해왔다.
자바스크립트의 모든 객체는 부모 역할을 담당하는 객체와 연결되어 있는데, 이 부모 객체를 Prototype(프로토타입) 객체라고 한다.

모든 객체는 [[Prototype]]이라는 인터널 슬롯(internal slot)를 가진다. 이는 상속을 구현하는데 사용된다.


1-1. 함수 객체
함수 객체는 일반 객체와 달리 prootype 프로퍼티를 추가로 가지고 있다.
함수 객체는 자바에서와 비슷하게 new를 붙여줌으로써 생성자 함수 역할을 하게 한다.

function Man(name, age) {
    this.name=name;
    this.age=age;
    this.friend=function(){
        return 5+"명";
    }
     
  }

var who=new Man('Tom', 12); //클래스의 인스턴스 만드는 과정과 비슷하다
console.log(who.name,who.age, who.friend());

1-2. 생성자 함수 또한 추가, 삭제가 가능하다.
 생성자 함수 또한 객체이며, 객체들은 프로토타입 체인으로 인해  프로토타입 객체와 연결되어있기 때문이다.
 사용자는 프로토타입 체인에 추가/ 삭제를 반영시켜 주면 된다.

Man.prototype.pet="dog"; //상위 객체인 prototype에 접근해서 속성을 넣어줬다. prototype을 상속하는 자식 객체에도 변화가 따라온다.
console.log(who.pet);
Man.prototype.pet="cat"; //prototype의 속성 변경 
console.log(who.pet);

하지만 이는 생성자 함수로 만들어낸 객체 who에 추가되는 속성이 아니다. who의 [[prototype]]가 갖는 속성이다.
이외에도 new를 통한 생성자 함수로 객체를 만드는 방법 뿐만이 아니라 Objec.creat()를 통해 만드는 방법 등이 있으나 지금은 개념만 이해하고 알고 넘어가기로 했다.
이후에 Class를 통한 객체지향 방법이 추가되기도 했고, 현 단계의 내게는 Class를 이용하는 쪽이 더 익숙하기 때문이다.
나중에 prototype을 이용할 일이 많아지면 그때 더 정리해서 따로 올릴 생각이다.

2. toLocaleString()으로 천 단위로 ',' 찍기
여러 방법들이 있지만 가장 '편한' 쪽은 toLocaleString()을 이용하는 게 아닐까 싶다.
본래 자바 스크립트의 내장 함수인 toLocaleString()의 기능은 인수로 주어진 문화권 언어 표준에 맞는 Date표기를 반환하는 것이다. 하지만 아무 인수를 주어주지 않으면 Default로
type이 Number인 값을 문자열로 변환한 다음- 세 자릿수마다 ','를 찍어 반환한다.

let num=123456780;
console.log(num.toLocaleString());

원래의 의도대로라면 Date값을 인수로 주어진 나라의 날짜 표기법에 맞춰 변환한다.

let arr=new Date();
console.log(arr.toLocaleString("en-US")); //Date를 주어진 나라의 날짜 표기법에 맞게 변환하여 반환한다.

3. sort()를 통한 정렬
 정렬을 구현하는 데는 여러 방법들이 있지만 자바 스크립트에서 가장 편하게 쓸 수 있는 방법은 sort()함수를 이용하는 게 아닐까 싶다.
 sort는 인수로 들어오는 값을 '유니코드'를 기준으로 오름차순으로 정렬하여 반환한다. 이 경우, 사용자가 내림차순으로 정렬하고 싶다거나 숫자값을 정렬하고 싶을 때는 어떻게 해야 될 지 의구심이 생긴다.
 sort는 기본적으로 a, b를 인자로 받는데, 여기서 a는 배열의 앞선 인자-b는 a 뒤에 있는 인자를 의미한다. 내부적으로 둘을 비교한 후 리턴값이 0보다 작을 경우 a가 b 앞으로 온다. 리턴값이 0보다 클 경우는 b가 a 앞으로 온다.
0을 반환하면 순서는 변하지 않는다. 

 3-1. 문자열로 이루어진 배열 오름차순(default)
 var str=['Tom', 'Jim', 'Lee', 'James'];
//1. 문자 오름차순
console.log(str.sort()); //기본은 배열의 인자로 들어온 문자열을 비교하여 오름차순 

 3-2. 문자열로 이루어진 배열 내림차순
//2. 문자 내림차순
console.log(str.sort((a,b)=>{ //a가 먼저 오는 인수이며, 결과가 음수일 경우 앞으로 정렬한다. 여기서는 a가 더 큰 수인데도 음수를 반환하고 있다. 
    if(a>b) return -1
    else if(a<b) return 1 
}));
 3-3. 숫자 오름차순
//3. 숫자 오름차순
var num=[1,38, 35, 62, 99];
console.log(num.sort((a,b)=>{ //a-b에서 결과값이 양수가 나오면 b<a라는 뜻이다. 더 큰 값이 뒤로 간다.
   return a-b;
}));

 3-4. 숫자 내림차순
//4. 숫자 내림차순
console.log(num.sort((a,b)=>{ //위에서와 반대로 b-a 의 결과값이 양수면 a가 b보다 작은 값이라는 뜻이다. a가 더 작은 값일 수록 뒤로 간다. 
    return b-a;
 }));