논리합(||)과 논리곱(&&)은 결과값을 true or false로 표현한다. 하지만 다른 측면에서 보면
두 피연산자 중 true인 값을 결과값으로 가질 수도 있다.
단축 평가는 좌항에서 우항으로 표현식을 평가하면서 결과가 확정된 경우 나머지 평가를 생략한다.
그리고 평가가 확정된 값을 그대로 반환한다.

ex)단축 놀리 평가로 if식 대체
let dog=true;
let flower=false;
let animal="";
// if(dog) animal="dog는 동물";

animal=dog&&"dog는 동물";
console.log(animal); // &&에서는 모든 값을 확인해야 한다. 뒤에 오는 값이 결과로 반환된다.
animal="dog는 동물"&&dog;
console.log(animal);
animal=flower&&dog; //&&에서 첫 값부터 false임을 확인하면 뒤를 볼 필요도 없다.
console.log(animal);

animal=dog||"dog는 동물"; //||에서는 첫 값이 true면 뒤를 볼 필요도 없다.
console.log(animal);
animal=flower||dog; //||에서 첫 값이 false면 뒤의 값은 무엇인지 확인하고 반환한다.
console.log(animal);

제너레이터 함수
제너레이터는 사용자의 제어에 의해 블록을 일시 정지했다가 다시 실행할 수 있는
특수한 함수이다.
function* 키워드로 선언한다. 화살표 함수로 정의가 불가능하며 생성자 함수로 호출할 수 없다.

이렇게 선언한 제너레이트 함수를 호출하면 바로 함수로 사용하는 것이 아니라, 제너레이터 객체를 반환한다.
제너레이터 객체는 iterable이자 iterator이므로 for..in이나 next()를 사용할 수 있다.

next()메소드를 사용하면 다음 yield표현식까지 실행한 후 {value, done}객체를 반환한다.
yield는 해당 키워드 뒤에 오는 값을 제너레이터 객체의 value의 값으로 넣고 일시정지한다.

function* gen(){
    const a= yield 1;
    const b= yield (a+10);
    yield(a-b);
 
}

const generator=gen();
let result=generator.next(); //첫 next()에서 yield 1까지 실행. value는 1이 되지만 아직 a에는 값이 들어가지 않았다.
console.log(result);
result=generator.next(30); //두 번째 next에서 a=30이 되었고, 두 번째 yield에 의해 (a+10)의 값이 value가 되었다.
console.log(result);
result=generator.next(15); //세 번째 next에서 b=15가 되었고, 세 번째 yield에 의해 (a-b)의 값이 value가 되었다.
console.log(result);

Set
Set객체는 중복되지 않는- 고유한 값들의 집합이다. 집합을 표현하기 위한 자료구조로, 교집합/합집합/차집합/여집합을 구현할 수 있다.

let set=new Set([1,3,5,7,9]);
console.log(set.size); //1. length가 아닌 size로 크기 표현
set.add(0).add(0); //2. add메소드로 값을 추가할 수 있으며 중복값은 추가가 되지 않는다.
console.log(set)
console.log(set.has(1)); //3. has메소드로 해당 값의 소유여부를 true, false로 표현
set.delete(0); //4. delete메소드로 값 삭제
for(let a of set){console.log(a)}; //5. for...of문과 forEach로 요소 순회 가능

Map
Map객체는 키와 쌍으로 구성된 컬렉션 객체이다. key-value 한 쌍의 값으로 이루어져 있으며 key에는 중복 값이 허용되지 않는다.

let map=new Map([['key','value'],['key2','value']]);
console.log(map);
map.set('key3', 'value3'); //1. set메소드를 통해 요소 추가
console.log(map.get('key3')); //2. get메소드를 통해 요소 취득
map.delete('key3'); //3. delete메소드를 통해 해당 key값에 해당하는 value와 key를 삭제
console.log(map);
for(let a of map){console.log(a)}; //5. for...of문과 forEach로 요소 순회 가능




